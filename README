Немного про то, что тут реализовал.

Для решения решил реализовать такую структуру данных как ориентированный граф. При первых попытках прочитать рекурсивно директории обнаружил, что их очень большое количество. Реализация в graph.c
Чтобы не тормозить поиск элементов в самом графе, решил реализовать также простенькую хэш таблицу, в исходнике hash.c

Сам main.c содержит основную логику программы - рекурсивное чтение директорий, а также рекурсивный и линейный обход графа, для сравнения обоих способов. 
Также в главной программе содержатся принты, выводящие ответы на вопросы из задач.

Названия программ соответсвуют узлам графа, пронумерованные по порядку начиная с 0. При этом код сделан таким образом, чтобы узлы графа соответствовали последовательному
чтению списков.

Код не идеален, так как количество узлов графа (и хэш таблицы) намеренно сделано очень большим, чтобы точно вошли все значения.
Также пути до папок жестко заданы, что уменьшает гибкость программы. Реализация исправлений заняла бы достаточно много времени, поэтому я решил тут показать
идеи для решения, и свою реализацию.

Запуск (папка el-1-last должна находиться в одной директории с исходным кодом):
$ make
$ ./main

Также я приложил на всякий случай пример вывода своей программы в Output.txt, чтобы можно было оценить результат не запуская программу.